'\"macro stdmacro
.\"
.\" Copyright (c) 2000-2004 Silicon Graphics, Inc.  All Rights Reserved.
.\" 
.\" This program is free software; you can redistribute it and/or modify it
.\" under the terms of the GNU General Public License as published by the
.\" Free Software Foundation; either version 2 of the License, or (at your
.\" option) any later version.
.\" 
.\" This program is distributed in the hope that it will be useful, but
.\" WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
.\" or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
.\" for more details.
.\" 
.\"
.TH PMSORTINSTANCES 3 "PCP" "Performance Co-Pilot"
.SH NAME
\f3pmSortInstances\f1 \- sort performance metric values on instance identifier
.SH "C SYNOPSIS"
.ft 3
#include <pcp/pmapi.h>
.sp
void pmSortInstances(pmResult *\fIresult\fP);
.sp
cc ... \-lpcp
.ft 1
.SH DESCRIPTION
.de CW
.ie t \f(CW\\$1\f1\\$2
.el \fI\\$1\f1\\$2
..
.PP
The routine
.B pmSortInstances
may be used to guarantee that for each performance metric in the
.I result
from
.BR pmFetch (3),
the instances are in ascending instance identifier sequence.
.PP
This is most useful when trying to compute rates from two consecutive
.BR pmFetch (3)
results.
.SH SEE ALSO
.BR PMAPI (3)
and
.BR pmFetch (3).
.SH DIAGNOSTICS
None.
