.TH "FBB::IRandStream" "3bobcat" "2005\-2014" "libbobcat\-dev_3\&.23\&.01\-x\&.tar\&.gz" "Random numbers istream"

.PP 
.SH "NAME"
FBB::IRandStream \- Istream producing random numbers
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/irandstream>\fP
.br 
Linking option: \fI\-lbobcat\fP 
.PP 
.SH "DESCRIPTION"
\fBFBB::IRandStream\fP objects may be used to extract random numbers in a
given range from a stream\&.
.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man\-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
\fBstd::istream\fP, 
.br 
\fBFBB::RandBuffer\fP (private) 
.PP 
.SH "CONSTRUCTORS"
.IP o 
\fBIRandStream(int max)\fP:
.br 
This \fBFBB::IRandStream()\fP constructor initializes the random generator\&.
The default seed (i\&.e\&., 1) for the \fBsrand\fP(3) function is used, meaning that
every new run of the program will generate the same sequence of random
values\&. Another constructor (see below) is provided when this is not
considered appropriate\&. Random values between 1 and \fImax\fP (inclusive) are
returned\&.
.IP 
.IP o 
\fBIRandStream(int min, int max)\fP:
.br 
This \fBFBB::IRandStream()\fP constructor initializes the random generator\&.
The default seed (i\&.e\&., 1) for the \fBsrand\fP(3) function is used, meaning that
every new run of the program will generate the same sequence of random
values\&. Another constructor (see below) is provided when this is not
considered appropriate\&. Random values between \fImin\fP and \fImax\fP (inclusive)
are returned\&.
.IP 
.IP o 
\fBIRandStream(int min, int max, int seed)\fP:
.br 
This \fBFBB::IRandStream()\fP constructor initializes the random
generator\&. The seed is used to initialze the random number generator\&. To start
the random generator at some unpredictable point, \fItime(0)\fP could be used\&.
Random values between \fImin\fP and \fImax\fP (inclusive) are returned\&.

.PP 
.SH "INHERITED MEMBERS"

.PP 
Since the class uses public derivation from \fBstd::istream\fP, all members
of this class can be used\&.
.PP 
.SH "EXAMPLE"
.nf 
#include <iostream>
#include <bobcat/irandstream>

using namespace std;
using namespace FBB;

int main(int argc, char **argv)
{
    IRandStream in(1000);

    for (; argc\-\-; )
    {
        size_t random;
        in >> random;
        cout << random << endl;
    }

    return 0;
}


.fi 

.PP 
.SH "FILES"
\fIbobcat/irandstream\fP \- defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7), \fBrandbuffer\fP(3bobcat)
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_3\&.23\&.01\-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_3\&.23\&.01\-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_3\&.23\&.01\-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_3\&.23\&.01\-x_*\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1\-dev_3\&.23\&.01\-x_*\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\(cq\&s Own Base Classes And Templates\(cq\&\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
GNU General Public License (GPL)\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
