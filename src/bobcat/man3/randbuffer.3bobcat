.TH "FBB::RandBuffer" "3bobcat" "2005\-2014" "libbobcat\-dev_3\&.23\&.01\-x\&.tar\&.gz" "random number streambuf"

.PP 
.SH "NAME"
FBB::RandBuffer \- std::streambuf generating random numbers
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/randbuffer>\fP
.br 
Linking option: \fI\-lbobcat\fP 
.PP 
.SH "DESCRIPTION"

.PP 
\fBFBB:RandBuffer\fP objects may be used as a \fBstd::streambuf\fP of
\fIstd::istream\fP objects to allow the extraction of random numbers from the
stream\&.
.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man\-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
std::streambuf
.PP 
.SH "CONSTRUCTOR"
.IP o 
\fBRandbuffer(int min, int max, size_t seed = 1)\fP:
.br 
This \fBRandbuffer()\fP constructor initializes the random generator\&. The
seed is used to initialze the random number generator\&.Random values between
\fImin\fP and \fImax\fP (inclusive) are returned\&.

.PP 
.SH "VIRTUAL MEMBERS"

.PP 
.IP o 
\fBint underflow()\fP:
.br 
This function is called by \fIstd::istream\fP objects using
\fBRandbuffer\fP\&. It produces the next available random number, separating the
random numbers by one blanks space\&. Random values between \fImin\fP and \fImax\fP
(inclusive) are returned (see the description of the constructor)\&.

.PP 
.SH "INHERITED MEMBERS"

.PP 
Since the class uses public derivation from 
\fBstd::streambuf\fP, all members of this class can be used\&.
.PP 
.SH "EXAMPLE"
.nf 
#include <iostream>
#include <istream>

#include <bobcat/randbuffer>
#include <bobcat/a2x>

using namespace std;
using namespace FBB;

int main(int argc, char **argv)
{
    if (argc == 1)
    {
        cout << \(dq\&expect: nruns min max seed\en\(dq\&;
        return 1;
    }

    Randbuffer rb(A2x(argv[2]), A2x(argv[3]), A2x(argv[4])\&.to<size_t>());

    istream istr(&rb);

    for (int idx = A2x(argv[1]); idx\-\-; )
    {
        int c;
        if (!(istr >> c))
        {
            cout << \(dq\&extraction failed\en\(dq\&;
            break;
        }    
        cout << \(dq\&next: \(dq\& << c << endl;
    }

    int count = 0;
    while (istr\&.unget())
        count++;

    cout << \(dq\&number of successful unget()\-calls: \(dq\& << count << endl;
    istr\&.clear();
    istr >> count;
    cout << \(dq\&and read: \(dq\& << count << endl;
    
    return 0;
}

.fi 

.PP 
.SH "FILES"
\fIbobcat/randbuffer\fP \- defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7), \fBirandstream\fP(3bobcat), \fBrand\fP(3), \fBsrand\fP(3),
\fBstd::streambuf\fP
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_3\&.23\&.01\-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_3\&.23\&.01\-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_3\&.23\&.01\-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_3\&.23\&.01\-x_*\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1\-dev_3\&.23\&.01\-x_*\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\(cq\&s Own Base Classes And Templates\(cq\&\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
GNU General Public License (GPL)\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
