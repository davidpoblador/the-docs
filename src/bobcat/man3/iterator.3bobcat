.TH "FBB::Iterator" "3bobcat" "2005\-2014" "libbobcat\-dev_3\&.23\&.01\-x\&.tar\&.gz" "Iterator returning plain values"

.PP 
.SH "NAME"
FBB::Iterator \- Iterator returning plain values when dereferenced
.PP 
FBB::ReverseIterator \- reverse_iterator for \fBFBB::Iterator\fP
.PP 
.SH "SYNOPSIS"
\fB#include <bobcat/iterator>\fP
.br 

.PP 
.SH "DESCRIPTION"

.PP 
The \fBFBB::Iterator<Type>\fP class template implements a bidirectional iterator
for plain data types\&. Dereferencing \fBFBB::Iterator\fP objects returns values
of type \fBType\fP, e\&.g\&., \fIchar\fP or \fIint\fP\&. This iterator comes in handy in
case you need to initialize an objects with a range of values, which are of
some basic type (see also the \fBEXAMPLE\fP section)\&.
.PP 
\fBFBB::ReverseIterator\fP implements a reverse iterator for \fBFBB::Iterator\fP\&. 
.PP 
.SH "NAMESPACE"
\fBFBB\fP
.br 
All constructors, members, operators and manipulators, mentioned in this
man\-page, are defined in the namespace \fBFBB\fP\&.
.PP 
.SH "INHERITS FROM"
\fIstd::iterator<std::bidirectional_iterator_tag, \&.\&.\&.>\fP
.PP 
.SH "CONSTRUCTORS"

.PP 
Constructors for \fBIterator<Type>\fP:
.IP o 
\fBexplicit Iterator(Tye const &value)\fP:
.br 
This constructor initializes the \fBIterator\fP object with an initial
\fIType\fP value\&. When dereferencing this iterator, \fIvalue\fP is
returned\&. 

.PP 
The default implementations of the \fBIterator<Type>\fP\(cq\&s default, copy, and
move constructors are available\&.
.PP 
Constructors for \fBReverseIterator<Type>\fP:
.IP o 
\fBexplicit ReverseIterator(Type const &value)\fP:
.br 
This constructor initializes the \fBReverseIterator\fP object with an
initial \fIType\fP value\&. When dereferencing this iterator immediately
following its construction, the decremented \fIvalue\fP is returned
(without modifying the internally stored \fIType value\fP);
.IP 
.IP o 
\fBexplicit ReverseIterator(Iterator<Type> const &iter)\fP:
.br 
This constructor initializes the \fBReverseIterator\fP object with an
initial \fIIterator<Type>\fP object\&. When dereferencing this iterator
immediately following its construction, the decremented \fBIterator\fP\(cq\&s
\fIvalue\fP is returned (without modifying the \fIType
value\fP that is stored inside the \fBIterator\fP)\&.

.PP 
The default implementations of the \fBReverseIterator<Type>\fP\(cq\&s default, copy,
and move constructors are available\&.
.PP 
.SH "MEMBER FUNCTIONS"
For template parameter type \fIType\fP all members of
\fIstd::iterator<std:::reverse_iterator_tag, Type>\fP are available, as
\fBFBB::Iterator\fP and \fBFBB::ReverseIterator\fP inherit from this class\&.
.PP 
.IP o 
\fBIterator<Type> &operator++()\fP:
.br 
The (prefix) increment operator increments the iterator\(cq\&s value and
returns a reference to itself;
.IP 
.IP o 
\fBIterator<Type> &operator++(int)\fP:
.br 
The (postfix) increment operator increments the iterator\(cq\&s value and
returns a copy of itself, initialized with the iterator\(cq\&s value before
it was incremented;
.IP 
.IP o 
\fBIterator<Type> &operator\-\-()\fP:
.br 
The (prefix) decrement operator decrements the iterator\(cq\&s value and
returns a reference to itself;
.IP 
.IP o 
\fBIterator<Type> &operator\-\-(int)\fP:
.br 
The (postfix) decrement operator decrements the iterator\(cq\&s value and
returns a copy of itself, initialized with the iterator\(cq\&s value before
it was decremented;
.IP 
.IP o 
\fBbool operator==(Iterator<Type> const &rhs) const\fP:
.br 
This operator returns \fItrue\fP if the value of the current \fBIterator\fP
object is equal to the value of the \fIrhs\fP \fBIterator\fP object;
.IP 
.IP o 
\fBbool operator!=(Iterator<Type> const &rhs) const\fP:
.br 
This operator returns \fItrue\fP if the value of the current \fBIterator\fP
object is not equal to the value of the \fIrhs\fP \fBIterator\fP object;
.IP 
.IP o 
\fBType &operator*()\fP:
.br 
The derefence operator returns a reference to the \fBIterator\fP\(cq\&s value\&.
.IP 
.IP o 
\fBType const &operator*() const\fP:
.br 
This derefence operator returns a reference to the \fBIterator\fP\(cq\&s
immutable value\&.

.PP 
.SH "STATIC MEMBER FUNCTIONS"

.PP 
Static members of \fBIterator<Type>\fP:
.IP o 
\fBIterator<Type> last(Type value)\fP:
.br 
An \fBIterator<Type>\fP object is returned initialized with \fI++value\fP,
so it can be conveniently be used to create an inclusive iterator
range (see also section \fBEXAMPLE\fP);
.IP 
.IP o 
\fBIterator<Type> max()\fP:
.br 
An \fBIterator<Type>\fP object is returned initialized with the value
returned by \fIstd::numeric_limits<Type>::max()\fP;
.IP 
.IP o 
\fBIterator<Type> min()\fP:
.br 
An \fBIterator<Type>\fP object is returned initialized with the value
returned by \fIstd::numeric_limits<Type>::min()\fP 

.PP 
Static member of \fBReverseIterator<Type>\fP:
.IP o 
\fBReverseIterator<Type> last(Type const &value)\fP:
.br 
A \fBReverseIterator<Type>\fP object is returned initialized with
\fBIterator<Type>::last(value)\fP, so it can be conveniently be used to
create an inclusive reverse iterator range (see also section
\fBEXAMPLE\fP);

.PP 
.SH "EXAMPLE"
.nf 
#include <algorithm>
#include <iterator>
#include <iostream>
#include <string>

#include <bobcat/iterator>

using namespace std;
using namespace FBB;

int main()
{
    copy(Iterator<int>(10), Iterator<int>(20), 
            ostream_iterator<int>(cout, \(dq\&, \(dq\&));
    cout << \(cq\&\en\(cq\&;

    copy(Iterator<char>(*Iterator<char>::max() \- 9), 
            Iterator<char>::last(*Iterator<char>::max()), 
            ostream_iterator<int>(cout, \(dq\&, \(dq\&));
    cout << \(cq\&\en\(cq\&;

    cout << *Iterator<int>::max() << \(cq\&\en\(cq\&;
    copy(Iterator<int>(*Iterator<int>::max() \- 9), 
            Iterator<int>::last(*Iterator<int>::max()), 
            ostream_iterator<int>(cout, \(dq\&, \(dq\&));
    cout << \(cq\&\en\(cq\&;

    copy(ReverseIterator<int>(20), ReverseIterator<int>(10),
            ostream_iterator<int>(cout, \(dq\&, \(dq\&));
    cout << \(cq\&\en\(cq\&;

    std::string letters(Iterator<char>(\(cq\&a\(cq\&), Iterator<char>::last(\(cq\&z\(cq\&));
    cout << letters << \(cq\&\en\(cq\&;

    std::string caps(ReverseIterator<char>::last(\(cq\&Z\(cq\&), 
                     ReverseIterator<char>(\(cq\&A\(cq\&));
    cout << caps << \(cq\&\en\(cq\&;

}

.fi 

.PP 
.SH "FILES"
\fIbobcat/iterator\fP \- defines the class interface
.PP 
.SH "SEE ALSO"
\fBbobcat\fP(7)
.PP 
.SH "BUGS"
None Reported\&.
.PP 
.SH "DISTRIBUTION FILES"
.IP o 
\fIbobcat_3\&.23\&.01\-x\&.dsc\fP: detached signature;
.IP o 
\fIbobcat_3\&.23\&.01\-x\&.tar\&.gz\fP: source archive;
.IP o 
\fIbobcat_3\&.23\&.01\-x_i386\&.changes\fP: change log;
.IP o 
\fIlibbobcat1_3\&.23\&.01\-x_*\&.deb\fP: debian package holding the
libraries;
.IP o 
\fIlibbobcat1\-dev_3\&.23\&.01\-x_*\&.deb\fP: debian package holding the
libraries, headers and manual pages;
.IP o 
\fIhttp://sourceforge\&.net/projects/bobcat\fP: public archive location;

.PP 
.SH "BOBCAT"
Bobcat is an acronym of `Brokken\(cq\&s Own Base Classes And Templates\(cq\&\&.
.PP 
.SH "COPYRIGHT"
This is free software, distributed under the terms of the 
GNU General Public License (GPL)\&.
.PP 
.SH "AUTHOR"
Frank B\&. Brokken (\fBf\&.b\&.brokken@rug\&.nl\fP)\&.
.PP 
